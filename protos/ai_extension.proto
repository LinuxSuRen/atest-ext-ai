syntax = "proto3";

package aiextension;

option go_package = "github.com/LinuxSuRen/atest-ext-ai/pkg/grpc";

// AIExtension service provides AI-powered capabilities for atest.
service AIExtension {
  // Generates content based on natural language prompts with context.
  // This is a general-purpose AI interface that can handle SQL generation,
  // test case writing, mock service creation, and other AI-powered tasks.
  rpc GenerateContent(GenerateContentRequest) returns (GenerateContentResponse);
}



// Request message for generating content based on natural language prompts.
message GenerateContentRequest {
  // The user's prompt in natural language.
  string prompt = 1;
  // The type of content to generate (e.g., "sql", "testcase", "mock").
  string contentType = 2;
  // Context information to help with generation.
  map<string, string> context = 3;
  // Optional: A session identifier to maintain context across multiple requests.
  optional string sessionId = 4;
  // Optional: Additional parameters specific to the content type.
  map<string, string> parameters = 5;
}

// Response message containing the result of content generation.
message GenerateContentResponse {
  // The response can be one of the following types.
  oneof result {
    // Contains the successful content generation details.
    ContentSuccessResponse success = 1;
    // Contains details about why the generation failed.
    ErrorResponse error = 2;
  }
}

// Represents a successful content generation.
message ContentSuccessResponse {
  // The generated content.
  string content = 1;
  // Human-readable explanation of the generation process.
  optional string explanation = 2;
  // Confidence score (0.0 to 1.0) indicating the AI's confidence in the result.
  optional double confidenceScore = 3;
  // Additional metadata about the generation.
  map<string, string> metadata = 4;
}

// Enum for structured error codes.
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  // The input was invalid (e.g., empty prompt).
  INVALID_ARGUMENT = 1;
  // The AI model failed to translate the query.
  TRANSLATION_FAILED = 2;
  // The requested database type is not supported.
  UNSUPPORTED_DATABASE = 3;
  // An internal error occurred in the service.
  INTERNAL_ERROR = 4;
}

// Represents a failed SQL generation attempt.
message ErrorResponse {
  // A structured error code for programmatic handling.
  ErrorCode code = 1;
  // A human-readable message describing the error.
  string message = 2;
}