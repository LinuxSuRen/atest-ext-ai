name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: 1.22
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image with release tags
  docker-release:
    name: Release Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.get_version.outputs.version }}
          GIT_COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Notify on release completion
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [docker-release]
    if: always()
    steps:
    - name: Notify success
      if: needs.docker-release.result == 'success'
      run: |
        echo "✅ Release ${{ needs.docker-release.outputs.tag_name }} completed successfully!"
        # Add notification to Slack, Discord, or other services here

    - name: Notify failure
      if: needs.docker-release.result == 'failure'
      run: |
        echo "❌ Release ${{ needs.docker-release.outputs.tag_name }} failed!"
        # Add failure notification here