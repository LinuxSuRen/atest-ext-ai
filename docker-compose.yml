# Production-ready Docker Compose for atest-ext-ai plugin

services:
  # Main atest-ext-ai plugin service
  atest-ai-plugin:
    build:
      context: .
      dockerfile: Dockerfile
    image: atest-ext-ai:latest
    container_name: atest-ai-plugin
    restart: unless-stopped
    environment:
      - AI_PROVIDER=${AI_PROVIDER:-local}
      - OLLAMA_ENDPOINT=${OLLAMA_ENDPOINT:-http://ollama:11434}
      - AI_MODEL=${AI_MODEL:-}
      - AI_API_KEY=${AI_API_KEY}
      - AI_PLUGIN_SOCKET_PATH=/tmp/atest-ext-ai.sock
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONFIG_PATH=/etc/atest-ai/config.yaml
    volumes:
      - socket_volume:/tmp
      - ./config/production.yaml:/etc/atest-ai/config.yaml:ro
      - plugin_logs:/var/log/atest-ai
    networks:
      - atest-network
    depends_on:
      - ollama
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh -c 'sleep 10 && exit 0' || exit 1"]
      interval: 60s
      timeout: 5s
      start_period: 120s
      retries: 10
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Local AI service (Ollama) - optional for local AI provider
  ollama:
    image: ollama/ollama:latest
    container_name: atest-ollama
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    networks:
      - atest-network
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh -c 'sleep 5 && exit 0' || exit 1"]
      interval: 60s
      timeout: 5s
      start_period: 240s
      retries: 20
    deploy:
      resources:
        reservations:
          memory: 2G
        limits:
          memory: 8G
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # API Testing Tool main service (example integration)
  api-testing:
    image: ghcr.io/linuxsuren/api-testing:v0.0.20
    container_name: atest-main
    restart: unless-stopped
    environment:
      - CONFIG_PATH=/etc/atest/config.yaml
    volumes:
      - socket_volume:/tmp
      - ./config/stores.yaml:/etc/atest/stores.yaml:ro
      - atest_data:/var/lib/atest
    ports:
      - "${ATEST_HTTP_PORT:-8080}:8080"
    networks:
      - atest-network
    depends_on:
      - atest-ai-plugin
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh -c 'sleep 5 && exit 0' || exit 1"]
      interval: 60s
      timeout: 5s
      start_period: 60s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL database (example data store)
  postgres:
    image: postgres:16-alpine
    container_name: atest-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-atest_ai_db}
      - POSTGRES_USER=${POSTGRES_USER:-atest_ai_user}
      # SECURITY: Password must be set via environment variable, no defaults
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Error: POSTGRES_PASSWORD is required}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-55432}:5432"
    networks:
      - atest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-atest_ai_user} -d ${POSTGRES_DB:-atest_ai_db}"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: atest-redis
    restart: unless-stopped
    # SECURITY: Password must be set via environment variable, no defaults
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?Error: REDIS_PASSWORD is required}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - atest-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      start_period: 30s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: atest-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - atest-network
    profiles:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "2"

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: atest-grafana
    restart: unless-stopped
    environment:
      # SECURITY: Password must be set via environment variable, no defaults
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?Error: GRAFANA_PASSWORD is required}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - atest-network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "2"

networks:
  atest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  socket_volume:
    driver: local
  ollama_data:
    driver: local
  atest_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  plugin_logs:
    driver: local